@model FinalAssignment.Models.Orders
@using FinalAssignment.Models;
@{
        ViewBag.Title = "Edit";
        Layout = "~/Views/Shared/_AdminLayout.cshtml";
        var clayout = "";
        var admin = Session["admin"];

        //Try Catch is implmented to catch null values // this happens when user first registers, becuase value is left empty.
        try
        {
            //if logging in using the cookie we need this to take value from cookie instead of Database
            admin = Request.Cookies["AdminSession"].Value.ToString();
            //Uses session to pass isadmin from database to var to pick what layout to render.
            if (admin.Equals("true"))
            {
                clayout = "~/Views/Shared/_AdminLayout.cshtml";
            }
            else
            {
                clayout = "~/Views/Shared/_AdminLayout.cshtml";
                Response.Redirect("~/Home/Index");
            }
            Layout = clayout;
        }
        catch (NullReferenceException ex)
        {
            clayout = "~/Views/Shared/_AdminLayout.cshtml";
            Layout = clayout;
        }
    }

    <h2>Edit</h2>


    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>Orders</h4>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.id)

            <div class="form-group">
                @Html.LabelFor(model => model.userID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.userID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.userID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.productID, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.productID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.productID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.total, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.total, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.total, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }
